macro (include_static name)
    set(prev_build_type ${BUILD_SHARED_LIBS})
    set(BUILD_SHARED_LIBS FALSE)
    include(${name})
    set(BUILD_SHARED_LIBS ${prev_build_type})
endmacro()

macro (include_shared name)
    set(prev_build_type ${BUILD_SHARED_LIBS})
    set(BUILD_SHARED_LIBS TRUE)
    include(${name})
    set(BUILD_SHARED_LIBS ${prev_build_type})
endmacro()

macro (set_output_directory dir)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${ENGINE_LIBRARY_DIR}/${dir}")
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${ENGINE_LIBRARY_DIR}/${dir}")
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${ENGINE_RUNTIME_DIR}/${dir}")
endmacro()

macro (configure_start name)
    message(STATUS "Configuring ${name} start")
    string(REPLACE " " "_" ts_name ${name})
    string(TIMESTAMP ${ts_name}_start_sec "%s")
    string(TIMESTAMP ${ts_name}_start_mic "%f")
    list(APPEND CMAKE_MESSAGE_INDENT "  ")
endmacro()

macro (configure_end name)
    list(POP_BACK CMAKE_MESSAGE_INDENT)
    string(REPLACE " " "_" ts_name ${name})
    string(TIMESTAMP ${ts_name}_end_sec "%s")
    string(TIMESTAMP ${ts_name}_end_mic "%f")

    math(EXPR ${ts_name}_sec "${${ts_name}_end_sec} - ${${ts_name}_start_sec}")
    math(EXPR ${ts_name}_mic "${${ts_name}_end_mic} - ${${ts_name}_start_mic}")
    math(EXPR ${ts_name}_mic_remain "${${ts_name}_mic} % 1000")
    math(EXPR ${ts_name}_mic "${${ts_name}_mic} / 1000")
    
    if (${ts_name}_mic_remain GREATER_EQUAL 999)
        math(EXPR ${ts_name}_sec "${${ts_name}_sec} + 1")
        set(${ts_name}_mic 0)
    else (${ts_name}_mic_remain GREATER_EQUAL 500)
        math(EXPR ${ts_name}_mic "${${ts_name}_mic} + 1")
    endif()

    message(STATUS "Configuring ${name} complete - (${${ts_name}_sec}.${${ts_name}_mic}s)")
endmacro()

macro (add_subdirectory_analyzed name)
    configure_start(${name})
    add_subdirectory(${ARGV})
    configure_end(${name})
endmacro()

macro (snake_to_camel_case name)
    string(REPLACE "_" ";" list ${name})
    foreach (split ${list})
        string(SUBSTRING ${split} 0 1 first)
        string(SUBSTRING ${split} 1 -1 remain)
        string(TOUPPER ${first} first_upper)
        list(APPEND result ${first_upper} ${remain})
    endforeach()
    string(CONCAT camel_case ${result})
endmacro()